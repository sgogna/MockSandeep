/* Copyright 2009 EB2 International Limited */
package pages.components.concurrentrequests;

import java.io.File;
import java.util.List;

import spring.SpringBeanContainer;

import com.sabre.ssw.proxy.concurrent.managment.ConcurrentRequestType;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;

import filehandlers.FileNamePair;

public class ConcurrentRequestsTopPanel extends CustomComponent
{

    @AutoGenerated
    private HorizontalLayout mainLayout;
    @AutoGenerated
    private Button deleteRuleButton;
    @AutoGenerated
    private GridLayout gridLayout_1;
    @AutoGenerated
    private ComboBox computeHashComboBox;
    @AutoGenerated
    private Label computeHashLabel;
    @AutoGenerated
    private ComboBox requestTypeComboBox;
    @AutoGenerated
    private Label requestTypeLabel;
    @AutoGenerated
    private TextField ruleNameTextField;
    @AutoGenerated
    private Label ruleNameLabel;

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    private static final long serialVersionUID = 1L;

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    private ConcurrentRequestChangeFlag changeFlag;

    private boolean checkChangeFlag = true;
    private List<FileNamePair> fileNamePairList;

    public ConcurrentRequestsTopPanel()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        initialize();
    }

    private void initialize()
    {
        initRequestTypeComboBox();

        initRuleNameTextField();
        initComputeHashComboBox();
    }

    public void addDeleteButtonListener(ClickListener clickListener)
    {
        deleteRuleButton.addListener(clickListener);
    }

    private void initComputeHashComboBox()
    {
        computeHashComboBox.setImmediate(true);
        computeHashComboBox.setNewItemsAllowed(true);
        computeHashComboBox.setNullSelectionAllowed(false);
        computeHashComboBox.addListener(new ValueChangeListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void valueChange(ValueChangeEvent event)
            {
                if (checkChangeFlag)
                {
                    changeFlag.setChange(true);
                }
            }
        });
        this.fileNamePairList = SpringBeanContainer.getFileTagsManager().getAllFiles();
        for (FileNamePair fileNamePair : fileNamePairList)
        {
            computeHashComboBox.addItem(fileNamePair.getName());
        }
    }

    public void addComputeHashComboBoxListener(ValueChangeListener listener)
    {
        computeHashComboBox.addListener(listener);
    }

    private void initRuleNameTextField()
    {
        ruleNameTextField.setImmediate(true);
        ruleNameTextField.addListener(new TextChangeListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void textChange(TextChangeEvent event)
            {
                if (checkChangeFlag)
                {
                    changeFlag.setChange(true);
                }
            }
        });
    }

    private void initRequestTypeComboBox()
    {
        requestTypeComboBox.setImmediate(true);
        requestTypeComboBox.setTextInputAllowed(false);
        requestTypeComboBox.setNullSelectionAllowed(false);
        for (ConcurrentRequestType type : ConcurrentRequestType.values())
        {
            requestTypeComboBox.addItem(type);
        }
        requestTypeComboBox.addListener(new ValueChangeListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void valueChange(ValueChangeEvent event)
            {
                if (checkChangeFlag)
                {
                    changeFlag.setChange(true);
                }
            }
        });
    }

    public void addRequestTypeComboBoxListener(ValueChangeListener listener)
    {
        requestTypeComboBox.addListener(listener);
    }

    public void setRuleName(String name)
    {
        checkChangeFlag = false;
        ruleNameTextField.setValue(name);
        checkChangeFlag = true;
    }

    public void setType(ConcurrentRequestType type)
    {
        checkChangeFlag = false;
        requestTypeComboBox.select(type);
        checkChangeFlag = true;
    }

    public void setFilePattern(String filePattern)
    {
        checkChangeFlag = false;
        if (!computeHashComboBox.containsId(filePattern))
        {
            computeHashComboBox.addItem(filePattern);
        }
        computeHashComboBox.select(filePattern);
        checkChangeFlag = true;
    }

    public String getName()
    {
        return (String) ruleNameTextField.getValue();
    }

    public ConcurrentRequestType getType()
    {
        return (ConcurrentRequestType) requestTypeComboBox.getValue();
    }

    public String getFilePattern()
    {
       return (String) computeHashComboBox.getValue(); 
    }
    
    public File getSelectedFileForFilepattern() {
        String pattern = (String) computeHashComboBox.getValue();
        for (FileNamePair pair: fileNamePairList) {
            if (pair.getName().equals(pattern)) {
                return pair.getFile();
            }
        }
        return null;
    }

    public void setChangeFlag(ConcurrentRequestChangeFlag changeFlag)
    {
        this.changeFlag = changeFlag;
    }

    public void setDeleteButtonVisiblity(boolean visiblity)
    {
        deleteRuleButton.setVisible(visiblity);
    }

    @AutoGenerated
    private HorizontalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new HorizontalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("-1px");
        mainLayout.setMargin(false);

        // top-level component properties
        setWidth("100.0%");
        setHeight("-1px");

        // gridLayout_1
        gridLayout_1 = buildGridLayout_1();
        mainLayout.addComponent(gridLayout_1);

        // deleteRuleButton
        deleteRuleButton = new Button();
        deleteRuleButton.setCaption("Delete rule");
        deleteRuleButton.setImmediate(true);
        deleteRuleButton.setWidth("-1px");
        deleteRuleButton.setHeight("-1px");
        mainLayout.addComponent(deleteRuleButton);
        mainLayout.setExpandRatio(deleteRuleButton, 1.0f);
        mainLayout.setComponentAlignment(deleteRuleButton, new Alignment(6));

        return mainLayout;
    }

    @AutoGenerated
    private GridLayout buildGridLayout_1()
    {
        // common part: create layout
        gridLayout_1 = new GridLayout();
        gridLayout_1.setImmediate(false);
        gridLayout_1.setWidth("-1px");
        gridLayout_1.setHeight("-1px");
        gridLayout_1.setMargin(false);
        gridLayout_1.setSpacing(true);
        gridLayout_1.setColumns(2);
        gridLayout_1.setRows(3);

        // ruleNameLabel
        ruleNameLabel = new Label();
        ruleNameLabel.setImmediate(false);
        ruleNameLabel.setWidth("-1px");
        ruleNameLabel.setHeight("-1px");
        ruleNameLabel.setValue("Rule name");
        gridLayout_1.addComponent(ruleNameLabel, 0, 0);

        // ruleNameTextField
        ruleNameTextField = new TextField();
        ruleNameTextField.setImmediate(false);
        ruleNameTextField.setWidth("220px");
        ruleNameTextField.setHeight("-1px");
        ruleNameTextField.setSecret(false);
        gridLayout_1.addComponent(ruleNameTextField, 1, 0);

        // requestTypeLabel
        requestTypeLabel = new Label();
        requestTypeLabel.setImmediate(false);
        requestTypeLabel.setWidth("-1px");
        requestTypeLabel.setHeight("-1px");
        requestTypeLabel.setValue("Request type");
        gridLayout_1.addComponent(requestTypeLabel, 0, 1);

        // requestTypeComboBox
        requestTypeComboBox = new ComboBox();
        requestTypeComboBox.setImmediate(false);
        requestTypeComboBox.setWidth("190px");
        requestTypeComboBox.setHeight("-1px");
        gridLayout_1.addComponent(requestTypeComboBox, 1, 1);

        // computeHashLabel
        computeHashLabel = new Label();
        computeHashLabel.setImmediate(false);
        computeHashLabel.setWidth("-1px");
        computeHashLabel.setHeight("-1px");
        computeHashLabel.setValue("Compute hash using");
        gridLayout_1.addComponent(computeHashLabel, 0, 2);

        // computeHashComboBox
        computeHashComboBox = new ComboBox();
        computeHashComboBox.setImmediate(false);
        computeHashComboBox.setWidth("600px");
        computeHashComboBox.setHeight("-1px");
        gridLayout_1.addComponent(computeHashComboBox, 1, 2);

        return gridLayout_1;
    }

}
