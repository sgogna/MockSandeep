package com.sabre.sabresonic.mockserver.frg.processor;

import com.sabre.sabresonic.mockserver.frg.generator.FrdRequestAware;
import com.sabre.sabresonic.mockserver.frg.generator.Generator;
import com.sabre.sabresonic.mockserver.frg.object.FrgRequest;
import com.sabre.sabresonic.mockserver.frg.object.FrgResponse;
import com.sabre.sabresonic.mockserver.frg.xpath.XPathUtil;
import java.util.Random;

/**
 * Decorate FdgResponse by adding items generated by itemGenerator
 * @author Lukasz.Kwiatkowski@sabre.com (SG0218182)
 */
public class AddItemProcessor extends AbstractFdgProcessorDecorator {

    protected Generator itemGenerator;
    protected Integer maxItemsToGenerate = 10;
    protected Integer minItemsToGenerate = 1;
    protected String xPath;
    protected Random rnd = new Random();
    
    public AddItemProcessor(FdgProcessor fdgProcessor) {
        super(fdgProcessor);
    }

    @Override
    public FrgResponse process(FrgRequest fdgRequest) {
        FrgResponse fdgResponse = this.fdgProcessor.process(fdgRequest);

        if(itemGenerator instanceof FrdRequestAware){
            ((FrdRequestAware)itemGenerator).setRequest(fdgRequest);
        }
        
        StringBuilder items = new StringBuilder();
        Integer itemsToGenerate = generateNumItems();
        for (int i = 0; i < itemsToGenerate; i++) {
            String item = itemGenerator.process();
            items.append(item);
        }
        String itemsString = items.toString();

        if (!itemsString.isEmpty()) {
            fdgResponse.setResponse(insertItemsToResponse(fdgResponse, items.toString()));
        }

        return fdgResponse;
    }

    protected String insertItemsToResponse(FrgResponse fdgResponse, String items) {
        String key = "${key}";
        String result = XPathUtil.insertTextNode(fdgResponse.getResponse(), xPath, key);
        return result.replace(key, items);
    }

    public Integer generateNumItems() {
        int min = getMinItemsToGenerate();
        int max = getMaxItemsToGenerate();
        return  rnd.nextInt(max - min + 1) + min;
    }

    public void setItemGenerator(Generator itemGenerator) {
        this.itemGenerator = itemGenerator;
    }

    public Generator getItemGenerator() {
        return itemGenerator;
    }

    public Integer getMaxItemsToGenerate() {
        return maxItemsToGenerate;
    }

    public void setMaxItemsToGenerate(Integer maxItemsToGenerate) {
        this.maxItemsToGenerate = maxItemsToGenerate;
    }

    public Integer getMinItemsToGenerate() {
        return minItemsToGenerate;
    }

    public void setMinItemsToGenerate(Integer minItemsToGenerate) {
        this.minItemsToGenerate = minItemsToGenerate;
    }

    /**
     * xPath where the items should be added
     * @param xPath
     */
    public void setxPath(String xPath) {
        this.xPath = xPath;
    }

    /**
     * xPath where the items should be added
     * @return
     */
    public String getxPath() {
        return xPath;
    }
    
    
}
