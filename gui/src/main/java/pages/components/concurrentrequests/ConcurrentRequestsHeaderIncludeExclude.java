/* Copyright 2009 EB2 International Limited */
package pages.components.concurrentrequests;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.sabre.ssw.proxy.concurrent.managment.ConcurrentHeaderAttribute;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.BaseTheme;

public class ConcurrentRequestsHeaderIncludeExclude extends CustomComponent
{

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private VerticalLayout ExcludeVerticalLayout;
    @AutoGenerated
    private Button addNewExcludeButton;
    @AutoGenerated
    private Table excludeTable;
    @AutoGenerated
    private Label label_2;
    @AutoGenerated
    private VerticalLayout includeVerticalLayout;
    @AutoGenerated
    private Button addNewIncludeButton;
    @AutoGenerated
    private Table includeTable;
    @AutoGenerated
    private Label label_1;

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    private static final long serialVersionUID = 1L;
    private static final String ATTRIBUTE = "ATTRIBUTE";
    private static final String DELETE = "DELETE";

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    private ConcurrentRequestChangeFlag changeFlag;
    private ConcurrentRequestsHeaderIncludeExcludeEditWindow includeEditWindow = new ConcurrentRequestsHeaderIncludeExcludeEditWindow();
    private ConcurrentRequestsHeaderIncludeExcludeEditWindow excludeEditWindow = new ConcurrentRequestsHeaderIncludeExcludeEditWindow();
    private File selectedFile;

    public ConcurrentRequestsHeaderIncludeExclude()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        initialize();
    }

    private void initialize()
    {
        initIncludeTable();
        initExcludeTable();
        initEditWindows();
        initAddButtons();
    }

    private void initAddButtons()
    {
        addNewIncludeButton.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                includeEditWindow.show(selectedFile, null);
                getWindow().addWindow(includeEditWindow);
            }
        });

        addNewExcludeButton.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                excludeEditWindow.show(selectedFile, null);
                getWindow().addWindow(excludeEditWindow);
            }
        });
    }

    private void initEditWindows()
    {
        includeEditWindow.addButtonListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                setInclude(includeEditWindow.getHeaderTag(), includeEditWindow.isNew());
                getWindow().removeWindow(includeEditWindow);
            }
        });

        excludeEditWindow.addButtonListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                setExclude(excludeEditWindow.getHeaderTag(), excludeEditWindow.isNew());
                getWindow().removeWindow(excludeEditWindow);
            }
        });
    }

    private void initExcludeTable()
    {
        excludeTable.addContainerProperty(ATTRIBUTE, String.class, null);
        excludeTable.addContainerProperty(DELETE, Button.class, null);
        excludeTable.setImmediate(true);
        excludeTable.setSelectable(true);
        excludeTable.addListener(new ItemClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void itemClick(ItemClickEvent event)
            {
                if (event.isDoubleClick())
                {
                    excludeEditWindow.show(selectedFile, (ConcurrentHeaderAttribute) event.getItemId());
                    getWindow().addWindow(excludeEditWindow);
                }
            }
        });
    }

    private void initIncludeTable()
    {
        includeTable.addContainerProperty(ATTRIBUTE, String.class, null);
        includeTable.addContainerProperty(DELETE, Button.class, null);
        includeTable.setImmediate(true);
        includeTable.setSelectable(true);
        includeTable.addListener(new ItemClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void itemClick(ItemClickEvent event)
            {
                if (event.isDoubleClick())
                {
                    includeEditWindow.show(selectedFile, (ConcurrentHeaderAttribute) event.getItemId());
                    getWindow().addWindow(includeEditWindow);
                }
            }
        });
    }

    public void setExcludeIncludeList(List<ConcurrentHeaderAttribute> excludeHeaderAttributes, List<ConcurrentHeaderAttribute> includeHeaderAttributes)
    {
        includeTable.removeAllItems();
        for (final ConcurrentHeaderAttribute concurrentHeaderAttribute : includeHeaderAttributes)
        {
            addNewIncludeToTable(concurrentHeaderAttribute);
        }

        excludeTable.removeAllItems();
        for (final ConcurrentHeaderAttribute concurrentHeaderAttribute : excludeHeaderAttributes)
        {
            addNewExcludeToTable(concurrentHeaderAttribute);
        }
    }

    private void addNewExcludeToTable(final ConcurrentHeaderAttribute concurrentHeaderAttribute)
    {
        Button b = getDeleteButton(concurrentHeaderAttribute, excludeTable);
        Object[] objects = new Object[] { concurrentHeaderAttribute.getAttribute(), b };
        excludeTable.addItem(objects, concurrentHeaderAttribute);
    }

    private void addNewIncludeToTable(final ConcurrentHeaderAttribute concurrentHeaderAttribute)
    {
        Button b = getDeleteButton(concurrentHeaderAttribute, includeTable);
        Object[] objects = new Object[] { concurrentHeaderAttribute.getAttribute(), b };
        includeTable.addItem(objects, concurrentHeaderAttribute);
    }

    private Button getDeleteButton(final ConcurrentHeaderAttribute concurrentHeaderAttribute, final Table table)
    {
        Button b = new Button("Delete");
        b.setStyleName(BaseTheme.BUTTON_LINK);
        b.setIcon(new ThemeResource("icons/delete.gif"));
        b.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                table.removeItem(concurrentHeaderAttribute);
                changeFlag.setChange(true);
            }
        });
        return b;
    }

    public List<ConcurrentHeaderAttribute> getIncludeList()
    {
        List<ConcurrentHeaderAttribute> includeList = new ArrayList<ConcurrentHeaderAttribute>();
        for (Iterator< ? > iterator = includeTable.getItemIds().iterator(); iterator.hasNext();)
        {
            Object o = iterator.next();
            includeList.add(new ConcurrentHeaderAttribute(includeTable.getItem(o).getItemProperty(ATTRIBUTE).getValue().toString()));
        }
        return includeList;
    }

    public List<ConcurrentHeaderAttribute> getExcludeList()
    {
        List<ConcurrentHeaderAttribute> excludeList = new ArrayList<ConcurrentHeaderAttribute>();
        for (Iterator< ? > iterator = excludeTable.getItemIds().iterator(); iterator.hasNext();)
        {
            Object o = iterator.next();
            excludeList.add(new ConcurrentHeaderAttribute(excludeTable.getItem(o).getItemProperty(ATTRIBUTE).getValue().toString()));
        }
        return excludeList;
    }

    public void setChangeFlag(ConcurrentRequestChangeFlag changeFlag)
    {
        this.changeFlag = changeFlag;
    }

    private void setInclude(ConcurrentHeaderAttribute attribute, boolean isNew)
    {
        if (isNew)
        {
            addNewIncludeToTable(attribute);
        }
        else
        {
            updateIncludeById(attribute);
        }
        changeFlag.setChange(true);
    }

    private void updateIncludeById(ConcurrentHeaderAttribute attribute)
    {
        Item item = includeTable.getItem(attribute);
        item.getItemProperty(ATTRIBUTE).setValue(attribute.getAttribute());
    }

    private void setExclude(ConcurrentHeaderAttribute attribute, boolean isNew)
    {
        if (isNew)
        {
            addNewExcludeToTable(attribute);
        }
        else
        {
            updateExcludeById(attribute);
        }
        changeFlag.setChange(true);
    }

    private void updateExcludeById(ConcurrentHeaderAttribute attribute)
    {
        Item item = excludeTable.getItem(attribute);
        item.getItemProperty(ATTRIBUTE).setValue(attribute.getAttribute());
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        // includeVerticalLayout
        includeVerticalLayout = buildIncludeVerticalLayout();
        mainLayout.addComponent(includeVerticalLayout);
        mainLayout.setExpandRatio(includeVerticalLayout, 1.0f);

        // ExcludeVerticalLayout
        ExcludeVerticalLayout = buildExcludeVerticalLayout();
        mainLayout.addComponent(ExcludeVerticalLayout);
        mainLayout.setExpandRatio(ExcludeVerticalLayout, 1.0f);

        return mainLayout;
    }

    @AutoGenerated
    private VerticalLayout buildIncludeVerticalLayout()
    {
        // common part: create layout
        includeVerticalLayout = new VerticalLayout();
        includeVerticalLayout.setImmediate(false);
        includeVerticalLayout.setWidth("100.0%");
        includeVerticalLayout.setHeight("100.0%");
        includeVerticalLayout.setMargin(false);

        // label_1
        label_1 = new Label();
        label_1.setStyleName("border-label");
        label_1.setImmediate(false);
        label_1.setWidth("-1px");
        label_1.setHeight("-1px");
        label_1.setValue("Includes");
        includeVerticalLayout.addComponent(label_1);

        // includeTable
        includeTable = new Table();
        includeTable.setImmediate(false);
        includeTable.setWidth("100.0%");
        includeTable.setHeight("100.0%");
        includeVerticalLayout.addComponent(includeTable);
        includeVerticalLayout.setExpandRatio(includeTable, 1.0f);

        // addNewIncludeButton
        addNewIncludeButton = new Button();
        addNewIncludeButton.setCaption("Add new include");
        addNewIncludeButton.setImmediate(true);
        addNewIncludeButton.setWidth("-1px");
        addNewIncludeButton.setHeight("-1px");
        includeVerticalLayout.addComponent(addNewIncludeButton);

        return includeVerticalLayout;
    }

    @AutoGenerated
    private VerticalLayout buildExcludeVerticalLayout()
    {
        // common part: create layout
        ExcludeVerticalLayout = new VerticalLayout();
        ExcludeVerticalLayout.setImmediate(false);
        ExcludeVerticalLayout.setWidth("100.0%");
        ExcludeVerticalLayout.setHeight("100.0%");
        ExcludeVerticalLayout.setMargin(false);

        // label_2
        label_2 = new Label();
        label_2.setStyleName("border-label");
        label_2.setImmediate(false);
        label_2.setWidth("-1px");
        label_2.setHeight("-1px");
        label_2.setValue("Excludes");
        ExcludeVerticalLayout.addComponent(label_2);

        // excludeTable
        excludeTable = new Table();
        excludeTable.setImmediate(false);
        excludeTable.setWidth("100.0%");
        excludeTable.setHeight("100.0%");
        ExcludeVerticalLayout.addComponent(excludeTable);
        ExcludeVerticalLayout.setExpandRatio(excludeTable, 1.0f);

        // addNewExcludeButton
        addNewExcludeButton = new Button();
        addNewExcludeButton.setCaption("Add new exclude");
        addNewExcludeButton.setImmediate(true);
        addNewExcludeButton.setWidth("-1px");
        addNewExcludeButton.setHeight("-1px");
        ExcludeVerticalLayout.addComponent(addNewExcludeButton);

        return ExcludeVerticalLayout;
    }

    public void setHashFile(Object value)
    {
        if (value == null)
        {
            this.selectedFile = null;
            return;
        }
        this.selectedFile = (File) value;
    }
}
