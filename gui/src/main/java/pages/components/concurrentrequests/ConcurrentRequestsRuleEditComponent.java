/* Copyright 2009 EB2 International Limited */
package pages.components.concurrentrequests;

import java.util.ArrayList;
import java.util.List;

import pages.subwindows.ConfirmationWindow;
import spring.SpringBeanContainer;

import com.sabre.ssw.proxy.concurrent.fileManager.ConcurrentRequestsRuleFilesManager;
import com.sabre.ssw.proxy.concurrent.managment.ConcurrentRequestRule;
import com.sabre.ssw.proxy.concurrent.managment.ConcurrentRequestType;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;

public class ConcurrentRequestsRuleEditComponent extends CustomComponent
{

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private HorizontalLayout horizontalLayout_2;
    @AutoGenerated
    private HorizontalSplitPanel horizontalSplitPanel;
    @AutoGenerated
    private Panel rulePanel;
    @AutoGenerated
    private VerticalLayout verticalLayout_5;
    @AutoGenerated
    private HorizontalLayout actionLayout;
    @AutoGenerated
    private Button okButton;
    @AutoGenerated
    private Button cancelButton;
    @AutoGenerated
    private Panel panel_1;
    @AutoGenerated
    private VerticalLayout middlePanelLayout;
    @AutoGenerated
    private ConcurrentRequestsHeaderIncludeExclude concurrentRequestsOriginalHostIncludeExclude;
    @AutoGenerated
    private ConcurrentRequestsExcludeTags concurrentRequestsExcludeTags;
    @AutoGenerated
    private ConcurrentRequestsTopPanel concurrentRequestsTopPanel;
    @AutoGenerated
    private Table ruleListTable;
    @AutoGenerated
    private Button addNewRuleButton;

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    private static final long serialVersionUID = 1L;
    private ConcurrentRequestRule rule;
    private List<ConcurrentRequestRule> ruleList = new ArrayList<ConcurrentRequestRule>();
    private ConcurrentRequestChangeFlag changeFlag = new ConcurrentRequestChangeFlag();
    private ConfirmationWindow confirmationWindow = new ConfirmationWindow();
    private ConfirmationWindow deleteRuleConfirmationWindow = new ConfirmationWindow();
    private ConfirmationWindow confirmationWindowThreeButton = new ConfirmationWindow();
    private ConcurrentRequestRule lastRule;

    public ConcurrentRequestsRuleEditComponent()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);
        initialize();
    }

    private void initialize()
    {
        rulePanel.setVisible(false);
        okButton.setEnabled(false);
        middlePanelLayout.removeAllComponents();
        initChangeFlag();
        concurrentRequestsExcludeTags.setChangeFlag(changeFlag);
        concurrentRequestsOriginalHostIncludeExclude.setChangeFlag(changeFlag);
        concurrentRequestsTopPanel.setChangeFlag(changeFlag);
        initTopPanel();
        initButtons();
        initConfirmationWindow();
        initConfirmationWindowWithTreeButtons();
        initDeleteRuleConfirmationWindow();
        initRuleListTable();
        initChangecomputeHashComboBox();
        horizontalSplitPanel.setSplitPosition(200, UNITS_PIXELS);
    }

    private void initChangecomputeHashComboBox()
    {
        concurrentRequestsTopPanel.addComputeHashComboBoxListener(new ValueChangeListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void valueChange(ValueChangeEvent event)
            {
                if (((String) event.getProperty().getValue()).isEmpty())
                {
                    panel_1.setEnabled(false);
                }
                else
                {
                    panel_1.setEnabled(true);
                }
                concurrentRequestsExcludeTags.setHashFile(concurrentRequestsTopPanel.getSelectedFileForFilepattern());
                concurrentRequestsOriginalHostIncludeExclude.setHashFile(concurrentRequestsTopPanel.getSelectedFileForFilepattern());
            }
        });
    }

    private void initDeleteRuleConfirmationWindow()
    {
        deleteRuleConfirmationWindow.setInformationText("Are you sure to delete this rule?");
        deleteRuleConfirmationWindow.setOKButtonCaption("Yes");
        deleteRuleConfirmationWindow.setCancelButtonCaption("No");
        deleteRuleConfirmationWindow.addOkButtonListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                deleteRule();
            }
        });
    }

    private void initConfirmationWindowWithTreeButtons()
    {
        confirmationWindowThreeButton.setInformationText("Do you want to save rule?");
        confirmationWindowThreeButton.setOKButtonCaption("Yes");
        confirmationWindowThreeButton.setCancelButtonCaption("No");
        confirmationWindowThreeButton.addOkButtonListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                saveRule();
                setRule(lastRule);
            }
        });
        confirmationWindowThreeButton.addCancelButtonListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                changeFlag.setChange(false);
                setRule(lastRule);
            }
        });

        Button cancel = new Button("Cancel");
        cancel.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                ruleListTable.select(rule);
            }
        });
        confirmationWindowThreeButton.addNewButton(cancel);
    }

    private void initChangeFlag()
    {
        changeFlag.setChangeListener(new ValueChangeListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void valueChange(ValueChangeEvent event)
            {
                if (changeFlag.isChange())
                {
                    okButton.setEnabled(true);
                }
                else
                {
                    okButton.setEnabled(false);
                }
            }
        });
    }

    private void initConfirmationWindow()
    {
        confirmationWindow.setInformationText("Are you sure to close this rule without saving?");
        confirmationWindow.setOKButtonCaption("Yes");
        confirmationWindow.setCancelButtonCaption("No");
        confirmationWindow.addOkButtonListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                cancel();
            }
        });
    }

    private void initRuleListTable()
    {
        ruleListTable.addContainerProperty("RULES", String.class, null);
        ruleListTable.setImmediate(true);
        ruleListTable.setSelectable(true);
        ruleListTable.addListener(new ItemClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void itemClick(ItemClickEvent event)
            {
                if (event.getButton() == ItemClickEvent.BUTTON_LEFT)
                {
                    setRule((ConcurrentRequestRule) event.getItemId());
                }
            }
        });

    }

    private void initButtons()
    {
        addNewRuleButton.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                setRule(null);
                panel_1.setEnabled(false);
                ruleListTable.select(null);
                changeFlag.setChange(true);
            }
        });

        okButton.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                saveRule();
            }
        });

        cancelButton.addListener(new ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                if (changeFlag.isChange())
                {
                    getWindow().addWindow(confirmationWindow);
                }
                else
                {
                    cancel();
                }
            }

        });

        concurrentRequestsTopPanel.addDeleteButtonListener(new Button.ClickListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void buttonClick(ClickEvent event)
            {
                getWindow().addWindow(deleteRuleConfirmationWindow);
            }
        });
    }

    protected void deleteRule()
    {
        ruleList.remove(rule);
        ruleListTable.removeItem(rule);
        saveAll();
        cancel();
    }

    private void cancel()
    {
        rule = null;
        changeFlag.setChange(false);
        ruleListTable.select(null);
        rulePanel.setVisible(false);
    }

    private void initTopPanel()
    {
        concurrentRequestsTopPanel.addRequestTypeComboBoxListener(new ValueChangeListener()
        {

            private static final long serialVersionUID = 1L;

            @Override
            public void valueChange(ValueChangeEvent event)
            {
                Object value = event.getProperty().getValue();
                middlePanelLayout.removeAllComponents();
                if (value.equals(ConcurrentRequestType.XML))
                {
                    middlePanelLayout.addComponent(concurrentRequestsExcludeTags);
                    if (rule != null)
                    {
                        concurrentRequestsExcludeTags.setExcludeList(rule.getXmlExcludes());
                    }
                }
                if (value.equals(ConcurrentRequestType.HEADER))
                {
                    middlePanelLayout.addComponent(concurrentRequestsOriginalHostIncludeExclude);
                    if (rule != null)
                    {
                        concurrentRequestsOriginalHostIncludeExclude.setExcludeIncludeList(rule.getExcludeHeaderAttributes(), rule.getIncludeHeaderAttributes());
                    }
                }
            }
        });
    }

    protected void saveRule()
    {
        if ((!ruleList.contains(rule) && !isNameAvailability(concurrentRequestsTopPanel.getName()))
                || concurrentRequestsTopPanel.getName() == null ||
                concurrentRequestsTopPanel.getName().isEmpty())
        {
            getWindow().showNotification("Incorrect rule name!", Notification.TYPE_ERROR_MESSAGE);
            return;
        }
        ruleList.remove(rule);
        rule.setName(concurrentRequestsTopPanel.getName());
        rule.setType(concurrentRequestsTopPanel.getType());
        rule.setFilePattern(concurrentRequestsTopPanel.getFilePattern());
        switch (rule.getType())
        {
            case XML:
                rule.setXmlExcludes(concurrentRequestsExcludeTags.getExcludeList());
                break;
            case HEADER:
                rule.setIncludeHeaderAttributes(concurrentRequestsOriginalHostIncludeExclude.getIncludeList());
                rule.setExcludeHeaderAttributes(concurrentRequestsOriginalHostIncludeExclude.getExcludeList());
                break;
        }
        ruleList.add(rule);
        saveAllAndReload();
        ConcurrentRequestRule r = getRuleByName(rule.getName());
        ruleListTable.select(r);
        setRule(r);
    }

    private void saveAllAndReload()
    {
        ConcurrentRequestsRuleFilesManager ruleFilesManager = saveAll();
        changeFlag.setChange(false);
        setRules(ruleFilesManager.readRules());
    }

    private ConcurrentRequestsRuleFilesManager saveAll()
    {
        ConcurrentRequestsRuleFilesManager ruleFilesManager = SpringBeanContainer.getConcurrentRequestsFilesManager();
        ruleFilesManager.saveAll(ruleList);
        SpringBeanContainer.getConcurrentRequestsManager().readRules();
        return ruleFilesManager;
    }

    private ConcurrentRequestRule getRuleByName(String name)
    {

        for (ConcurrentRequestRule rule : ruleList)
        {
            if (rule.getName().equals(name))
            {
                return rule;
            }
        }
        return null;
    }

    private boolean isNameAvailability(String name)
    {
        for (ConcurrentRequestRule rule : ruleList)
        {
            if (rule.getName().equals(name))
            {
                return false;
            }
        }
        return true;
    }

    private void setRule(ConcurrentRequestRule rule)
    {
        if (changeFlag.isChange())
        {
            getWindow().addWindow(confirmationWindowThreeButton);
            lastRule = rule;
            return;
        }
        concurrentRequestsTopPanel.setDeleteButtonVisiblity(rule != null);
        this.rule = (rule == null ? new ConcurrentRequestRule() : rule);
        concurrentRequestsTopPanel.setRuleName(this.rule.getName());
        concurrentRequestsTopPanel.setType(this.rule.getType());
        concurrentRequestsTopPanel.setFilePattern(this.rule.getFilePattern());
        switch (this.rule.getType())
        {
            case XML:
                concurrentRequestsExcludeTags.setExcludeList(this.rule.getXmlExcludes());
                break;
            case HEADER:
                concurrentRequestsOriginalHostIncludeExclude.setExcludeIncludeList(this.rule.getExcludeHeaderAttributes(), this.rule.getIncludeHeaderAttributes());
                break;
        }
        rulePanel.setVisible(true);

    }

    public void setRules(List<ConcurrentRequestRule> readRules)
    {
        this.ruleList = readRules;
        ruleListTable.removeAllItems();
        for (ConcurrentRequestRule concurrentRequestRule : readRules)
        {
            ruleListTable.addItem(new Object[] { concurrentRequestRule.getName() }, concurrentRequestRule);
        }
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(true);
        mainLayout.setSpacing(true);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        // addNewRuleButton
        addNewRuleButton = new Button();
        addNewRuleButton.setCaption("Add new rule");
        addNewRuleButton.setImmediate(true);
        addNewRuleButton.setWidth("-1px");
        addNewRuleButton.setHeight("-1px");
        mainLayout.addComponent(addNewRuleButton);

        // horizontalLayout_2
        horizontalLayout_2 = buildHorizontalLayout_2();
        mainLayout.addComponent(horizontalLayout_2);
        mainLayout.setExpandRatio(horizontalLayout_2, 1.0f);

        return mainLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildHorizontalLayout_2()
    {
        // common part: create layout
        horizontalLayout_2 = new HorizontalLayout();
        horizontalLayout_2.setImmediate(false);
        horizontalLayout_2.setWidth("100.0%");
        horizontalLayout_2.setHeight("100.0%");
        horizontalLayout_2.setMargin(false);
        horizontalLayout_2.setSpacing(true);

        // horizontalSplitPanel
        horizontalSplitPanel = buildHorizontalSplitPanel();
        horizontalLayout_2.addComponent(horizontalSplitPanel);
        horizontalLayout_2.setExpandRatio(horizontalSplitPanel, 1.0f);

        return horizontalLayout_2;
    }

    @AutoGenerated
    private HorizontalSplitPanel buildHorizontalSplitPanel()
    {
        // common part: create layout
        horizontalSplitPanel = new HorizontalSplitPanel();
        horizontalSplitPanel.setImmediate(false);
        horizontalSplitPanel.setWidth("100.0%");
        horizontalSplitPanel.setHeight("100.0%");
        horizontalSplitPanel.setMargin(false);

        // ruleListTable
        ruleListTable = new Table();
        ruleListTable.setImmediate(false);
        ruleListTable.setWidth("100.0%");
        ruleListTable.setHeight("100.0%");
        horizontalSplitPanel.addComponent(ruleListTable);

        // rulePanel
        rulePanel = buildRulePanel();
        horizontalSplitPanel.addComponent(rulePanel);

        return horizontalSplitPanel;
    }

    @AutoGenerated
    private Panel buildRulePanel()
    {
        // common part: create layout
        rulePanel = new Panel();
        rulePanel.setImmediate(false);
        rulePanel.setWidth("100.0%");
        rulePanel.setHeight("100.0%");

        // verticalLayout_5
        verticalLayout_5 = buildVerticalLayout_5();
        rulePanel.setContent(verticalLayout_5);

        return rulePanel;
    }

    @AutoGenerated
    private VerticalLayout buildVerticalLayout_5()
    {
        // common part: create layout
        verticalLayout_5 = new VerticalLayout();
        verticalLayout_5.setImmediate(false);
        verticalLayout_5.setWidth("100.0%");
        verticalLayout_5.setHeight("100.0%");
        verticalLayout_5.setMargin(true);
        verticalLayout_5.setSpacing(true);

        // concurrentRequestsTopPanel
        concurrentRequestsTopPanel = new ConcurrentRequestsTopPanel();
        concurrentRequestsTopPanel.setImmediate(false);
        concurrentRequestsTopPanel.setWidth("100.0%");
        concurrentRequestsTopPanel.setHeight("-1px");
        verticalLayout_5.addComponent(concurrentRequestsTopPanel);

        // panel_1
        panel_1 = buildPanel_1();
        verticalLayout_5.addComponent(panel_1);
        verticalLayout_5.setExpandRatio(panel_1, 1.0f);

        // actionLayout
        actionLayout = buildActionLayout();
        verticalLayout_5.addComponent(actionLayout);

        return verticalLayout_5;
    }

    @AutoGenerated
    private Panel buildPanel_1()
    {
        // common part: create layout
        panel_1 = new Panel();
        panel_1.setImmediate(false);
        panel_1.setWidth("100.0%");
        panel_1.setHeight("100.0%");

        // middlePanelLayout
        middlePanelLayout = buildMiddlePanelLayout();
        panel_1.setContent(middlePanelLayout);

        return panel_1;
    }

    @AutoGenerated
    private VerticalLayout buildMiddlePanelLayout()
    {
        // common part: create layout
        middlePanelLayout = new VerticalLayout();
        middlePanelLayout.setImmediate(false);
        middlePanelLayout.setWidth("100.0%");
        middlePanelLayout.setHeight("100.0%");
        middlePanelLayout.setMargin(false);

        // concurrentRequestsExcludeTags
        concurrentRequestsExcludeTags = new ConcurrentRequestsExcludeTags();
        concurrentRequestsExcludeTags.setImmediate(false);
        concurrentRequestsExcludeTags.setWidth("100.0%");
        concurrentRequestsExcludeTags.setHeight("100.0%");
        middlePanelLayout.addComponent(concurrentRequestsExcludeTags);

        // concurrentRequestsOriginalHostIncludeExclude
        concurrentRequestsOriginalHostIncludeExclude = new ConcurrentRequestsHeaderIncludeExclude();
        concurrentRequestsOriginalHostIncludeExclude.setImmediate(false);
        concurrentRequestsOriginalHostIncludeExclude.setWidth("100.0%");
        concurrentRequestsOriginalHostIncludeExclude.setHeight("100.0%");
        middlePanelLayout.addComponent(concurrentRequestsOriginalHostIncludeExclude);

        return middlePanelLayout;
    }

    @AutoGenerated
    private HorizontalLayout buildActionLayout()
    {
        // common part: create layout
        actionLayout = new HorizontalLayout();
        actionLayout.setImmediate(false);
        actionLayout.setWidth("100.0%");
        actionLayout.setHeight("-1px");
        actionLayout.setMargin(false);
        actionLayout.setSpacing(true);

        // cancelButton
        cancelButton = new Button();
        cancelButton.setCaption("Close");
        cancelButton.setImmediate(true);
        cancelButton.setWidth("70px");
        cancelButton.setHeight("-1px");
        actionLayout.addComponent(cancelButton);
        actionLayout.setExpandRatio(cancelButton, 1.0f);
        actionLayout.setComponentAlignment(cancelButton, new Alignment(34));

        // okButton
        okButton = new Button();
        okButton.setCaption("Zapisz");
        okButton.setImmediate(true);
        okButton.setWidth("70px");
        okButton.setHeight("-1px");
        actionLayout.addComponent(okButton);

        return actionLayout;
    }

}
